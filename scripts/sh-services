#!/bin/bash
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
SERVICES_PATH="$(realpath "${SCRIPT_PATH}"/..)"
MEDIA_PATH="$(realpath "${SCRIPT_PATH}"/../../media)"
DB_PATH="$(realpath "${SCRIPT_PATH}"/../../db)"

if command -v docker-compose &> /dev/null
then
    # Use `docker-compose`
    DOCKER_COMPOSE="docker-compose"
else
    # Use `docker compose`
    DOCKER_COMPOSE="docker compose"
fi

check_endpoint() {
  curl --connect-timeout 2 --output /dev/null --silent --head $@ "$1"
}

check_service_up() {
    local service=$1
    count=$(docker-compose -f "${service}/docker-compose.yml" ps | sed '1,2d' | grep -c "Up")
    total=$(docker-compose -f "${service}/docker-compose.yml" ps | sed '1,2d' | grep -c "^")
    if [ "$total" -eq "0" ]; then
        echo "No ${service} containers are up"
        return 1
    elif [ "$count" -eq "$total" ]; then
        echo "All ${service} containers are up"
        echo "live555:"
        docker-compose -f "${service}/docker-compose.yml" ps | sed '1,2d'
        return 0
    else
        echo "Some ${service} containers are not up"
        echo "live555:"
        docker-compose -f "${service}/docker-compose.yml" ps | sed '1,2d'
        return 1
    fi
}

# Merge the services
# First file has the highest priority
function merge_env_files(){
    output_file=$1
    shift 1
    env_files=$*
    echo "Merging ${env_files} into '${output_file}'"
    sort -u -t '=' -k 1,1 "$@" > "$1"
    sed -i -e '/^[ \t]*#/d' "$1"
    echo ""
    echo "Resulting '${output_file}' file:"
    cat "$1"
    echo ""
}

function remove_orphans(){
    containers=$(docker ps -a -q)
    for container in $containers; do
        container_name=$(docker inspect -f '{{.Name}}' "${container}")
        working_dir=$(docker inspect -f '{{(index .Config.Labels "com.docker.compose.project.working_dir")}}' "${container}")
        if [[ "${working_dir}" == "${SERVICES_PATH}"* ]]; then
            echo "Found container ${container_name} with working dir: '${working_dir}'"
            # If the working dir does not exist anymore and starts with 'SERVICES_PATH', then remove the container
            if [[ ! -d "${working_dir}" ]]; then
                echo "Removing orphan container: ${container_name} ${container}"
                docker rm -f "${container}"
            fi
        fi

    done
}

function clean_media(){
    rm -rf "${MEDIA_PATH:?}/"*
    rm -rf "${DB_PATH:?}/"*
}

function save_arch_info(){
    if [ ! -d "${SERVICES_PATH}"/conf ]; then
        mkdir -p "${SERVICES_PATH}"/conf
    fi
    echo "# This file is autogenerated by the sh-services script" > "${SERVICES_PATH}"/conf/0010-arch.env
    echo "# Do not modify this file manually" >> "${SERVICES_PATH}"/conf/0010-arch.env
    echo "" >> "${SERVICES_PATH}"/conf/0010-arch.env


    if [ "$(uname -m)" == "x86_64" ]; then
        echo "SH_ARCH=-amd64" >> "${SERVICES_PATH}"/conf/0010-arch.env
        echo "SH_NODE=false" >> "${SERVICES_PATH}"/conf/0010-arch.env
    elif [ "$(uname -m)" == "aarch64" ]; then
        L4TBASE_VERSION=32.7.3
        if command -v bai-osinfo &> /dev/null
        then
            L4TBASE_VERSION=$(bai-osinfo -l)
            SH_MACHINE=$(bai-osinfo -m)
            SH_SERIAL=$(bai-osinfo -s)
            if [[ $SH_MACHINE == *"node"* ]]; then
                SH_NODE=true
            else
                SH_NODE=false
            fi
        fi
        echo "SH_ARCH=-r${L4TBASE_VERSION}-arm64v8" >> "${SERVICES_PATH}"/conf/0010-arch.env
        echo "SH_MACHINE=${SH_MACHINE}" >> "${SERVICES_PATH}"/conf/0010-arch.env
        echo "SH_NODE=${SH_NODE}" >> "${SERVICES_PATH}"/conf/0010-arch.env
        echo "SH_SERIAL=${SH_SERIAL}" >> "${SERVICES_PATH}"/conf/0010-arch.env
        # TODO: remove this hardcoded env var
        if [[ $SH_NODE == "false" ]]; then
             echo "SIO_ENABLE_NVMPI=0" >> "${SERVICES_PATH}"/conf/0010-arch.env
        fi
    else
        echo "Unknown architecture: $(uname -m)"
        exit 1
    fi
}

function merge(){
    local service=$1
    touch "${service}/.env"
    env_files_to_merge="${service}/.env"

    # Check for .env files
    mkdir -p "${service}"/conf
    for env_file in "${service}"/conf/*.env; do
        if [ -f "${env_file}" ]; then
            env_files_to_merge="${env_files_to_merge} ${env_file}"
        fi
    done

    # Check for global .env files
    mkdir -p "${SERVICES_PATH}"/conf
    save_arch_info
    for env_file in "${SERVICES_PATH}"/conf/*.env; do
        if [ -f "${env_file}" ]; then
            env_files_to_merge="${env_files_to_merge} ${env_file}"
        fi
    done
            
    merge_env_files "${service}"/.env ${env_files_to_merge}

}

function edit(){
    local service=$1
    merge "${service}"
    echo "Editing ${service}"
    touch "${service}/conf/0001-edit.env"
    # Remove all comments from edit file
    sed -i -e '/^[ \t]*#/d' "${service}/conf/0001-edit.env"
    # Add the .env as commented lines to the edit 
    sed 's/^/# /' "${service}/.env" >> "${service}/conf/0001-edit.env"
    # Edit the edit file
    vi "${service}/conf/0001-edit.env"
    merge "${service}"    
}

function create_network(){
    network_name=$1
    if [ "$(docker network ls | grep ${network_name})" == "" ]; then
        echo "Creating network ${network_name}"
        docker network create "${network_name}"
    fi
}

function depends(){
    local service=$1
    # Check if the folder contains the "depends" file
    if [ -f "${service}/depends" ]; then
        # Read the contents of the "depends" file
        endpoints=$(grep "endpoint" "${service}"/depends | awk '{print $2}')
        
        # Loop through the endpoints
        for endpoint in $endpoints; do
            if [ -f "/proc/net/fib_trie" ] ; then
                if [ -f /.dockerenv ]; then
                    # inside docker
                    gateway_ip=$(awk '/32 host/ { print i } {i=$2}' /proc/net/fib_trie | head -n 1 | awk -F'.' '{$NF="1"}1' OFS='.')
                else
                    gateway_ip=$(awk '/32 host/ { print i } {i=$2}' /proc/net/fib_trie | head -n 1 )
                fi
                endpoint=${endpoint/gateway_ip/$gateway_ip}
            fi
            up=0
            # Loop for 15 seconds or until the endpoint is up
            for ((i=0; i<15; i++)); do
                if check_endpoint "$endpoint"; then
                    # Endpoint is up, so print "service ready"
                    echo "Endpoint '$endpoint' is ready"
                    up=1
                    break
                else
                    echo "Waiting for endpoint: '$endpoint' to be up..."
                    sleep 3
                fi
            done
            if [ $up -eq 0 ]; then
                # Endpoint was not up after 15 seconds, so stop the execution
                echo "Error: endpoint '$endpoint' was not up after 15 seconds"
                echo "Continuing execution."
            fi
        done

        files=$(grep "file" "${service}"/depends | awk '{print $2}')

        # Loop through the files
        for file in $files; do
            if [ -f "$file" ]; then
                # File is up, so print "service ready"
                echo "File '$file' is available."
            else
                echo "File is not available: '$file'. Stopping execution"
                return 1
            fi
        done

        enabled_services_up=$(grep "enabled_service_up" "${service}"/depends | awk '{print $2}')

        # Loop through the services
        for enabled_service in $enabled_services_up; do
            if [ -f "${SERVICES_PATH}/${enabled_service}/disabled" ]; then
                echo "Service '$enabled_service' is disabled. Skipping"
            else
                up=0
                for ((i=0; i<5; i++)); do
                    if ! check_service_up "${SERVICES_PATH}/${enabled_service}" ; then
                        echo "Waiting for service: '$enabled_service' to be up..."
                        sleep 3
                    else
                        up=1
                        break
                    fi
                done
                if [ $up -eq 0 ]; then
                    echo "Error: service '$enabled_service' was not up after 15 seconds"
                    echo "Continuing execution."
                fi
            fi
        done
    fi
    return 0
}

function up(){
    local service=$1
    # Check if disabled file exists
    if [ -f "${service}/disabled" ]; then
        echo "Skipping ${service} : disabled file found"
        return
    fi
    service_name=$(basename "${service}")
    echo "Bringing up ${service_name}"
    merge "${service}"
    compose_up "${service}" &
    sleep 1
}

function compose_up(){
    local service=$1
    if ! depends "${service}"; then
        echo "Skipping ${service} : depends failed"
        return
    fi
    cd "${service}" || exit 1
    echo "Starting ${service}"
    ${DOCKER_COMPOSE} up -d
    cd "${SERVICES_PATH}" || exit 1
}

function down(){
    local service=$1
    echo "Stopping ${service}"
    cd "${service}" || exit 1
    ${DOCKER_COMPOSE} down
    cd "${SERVICES_PATH}" || exit 1
}

function restart(){
    local service=$1
    down "${service}"
    up "${service}"
}

function enable(){
    local service=$1
    if [ -f "${service}/disabled" ]; then
        echo "Enabling ${service}."
        rm  "${service}/disabled"
    else
        echo "Service ${service} was already enabled."
    fi
}

function disable(){
    local service=$1
    if [ -f "${service}/disabled" ]; then
        echo "Skipping ${service} : disabled file found."
        return
    else
        echo "Disabling ${service}"
        touch "${service}/disabled"
    fi
}

function element_in_list(){
    element=$1
    shift
    list=( $@ )
    for e in "${list[@]}"; do
        if [ "$e" == "$element" ]; then
            return 0
        fi
    done
    return 1
}

function apply_to_services(){
    COMMAND=$1
    shift 1
    SERVICES=( "$@" )
    AVAILABLE_SERVICES_RAW=$(ls "${SERVICES_PATH}"/*/docker-compose.yml | sed -e 's/\/docker-compose.yml//g' -e 's/.*\///g' )
    AVAILABLE_SERVICES=$(echo "${AVAILABLE_SERVICES_RAW}"  | tr '\n' ' ' )
    AVAILABLE_SERVICES="${AVAILABLE_SERVICES} all"
    # Check if services is empty
    if [ "${#SERVICES[@]}" -eq 0 ]; then
        echo "No services specified"
        echo "Usage: $0 $COMMAND <service1> <service2> ..."
        echo "Available services: ${AVAILABLE_SERVICES}"
        exit 1
    fi
    # Create networks
    create_network "sh-device-ui_sh-ui-net"
    create_network "core_sighthound"

    # Check all services
    if element_in_list "all" "${SERVICES[@]}"; then
        echo "Applying command '${COMMAND}' to all services"
        SERVICES=(${AVAILABLE_SERVICES_RAW})
    fi
    # Iterate services
    echo "Applying command '${COMMAND}' to services: ${SERVICES[*]}"
    for service in "${SERVICES[@]}"; do
        # Check if service in AVAILABLE_SERVICES
        if element_in_list "${service}" "${AVAILABLE_SERVICES[@]}" ; then
            if [ "${service}" == " " ] ; then
                continue
            fi
            echo ""
            echo "###############################################"
            echo "### ${service}"
            echo "###############################################" 
            echo "Applying command '${COMMAND}' to ${service}"
            service_full_path="${SERVICES_PATH}/${service}"
            $COMMAND "${service_full_path}"
            echo "####################DONE#######################"
        else
            echo "Unknown service: ${service}"
            echo "Available services: ${AVAILABLE_SERVICES}"
        fi
    done
    echo "Exiting..."
    wait
}

LIST_OF_COMMANDS="merge up down restart edit enable disable clean_media remove_orphans"
COMMAND=$1
shift 1
case $COMMAND in
    "merge"|"up"|"down"|"restart"|"edit"|"enable"|"disable")
        apply_to_services "$COMMAND" $@
        ;;
    "clean_media"|"remove_orphans")
        "$COMMAND"
        ;;
    "")
        echo "No command specified, choose one from the list: ${LIST_OF_COMMANDS}"
        ;;
    *)
        echo "Unknown command: ${COMMAND}, choose one from the list: ${LIST_OF_COMMANDS}"
        ;;
esac
